---
interface Category {
  value: string;
  title: string;
}

const categories: Category[] = Astro.props.categories;
---

<div class="dropdown-filter">
  <button id="dropdown-toggle">Event Type ▼</button>
  <div id="dropdown-content" class="dropdown-content hidden">
    <ul>
      {
        categories.map((category) => (
          <li>
            <input
              type="checkbox"
              id={category.value}
              value={category.value}
              class="category-checkbox"
            />
            <label for={category.value}>{category.title}</label>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<script is:inline>
  const checkboxes = document.querySelectorAll(".category-checkbox");
  const dropdownContent = document.getElementById("dropdown-content");
  const dropdownToggle = document.getElementById("dropdown-toggle");

  // Toggle the dropdown visibility and update the button icon
  dropdownToggle.addEventListener("click", () => {
    const isHidden = dropdownContent.classList.toggle("hidden");
    dropdownToggle.innerHTML = isHidden ? "Event Type ▼" : "Event Type ▲";
  });

  // Hide dropdown if clicking outside of it
  document.addEventListener("click", (event) => {
    const isClickInside =
      dropdownContent.contains(event.target) ||
      dropdownToggle.contains(event.target);
    if (!isClickInside) {
      dropdownContent.classList.add("hidden");
      dropdownToggle.innerHTML = "Event Type ▼"; // Update to down arrow when hidden
    }
  });

  // Listen for changes in checkboxes
  checkboxes.forEach((checkbox) => {
    checkbox.addEventListener("change", () => {
      const selectedCategories = Array.from(checkboxes)
        .filter((checkbox) => checkbox.checked)
        .map((checkbox) => checkbox.value);

      // Dispatch the custom event with the selected categories
      const event = new CustomEvent("filterEvents", {
        detail: { selectedCategories },
      });

      window.dispatchEvent(event);
    });
  });
</script>

<style>
  .dropdown-filter {
    position: relative;
    display: inline-block;
  }

  .dropdown-content {
    display: block;
    position: absolute;
    background-color: white;
    box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
    padding: 12px;
    z-index: 1;
    width: max-content;
  }

  .hidden {
    display: none;
  }

  ul {
    list-style-type: none;
    padding: 0;
  }

  li {
    margin: 0 0;
  }

  #dropdown-content > ul:nth-child(1) {
    margin: 0;
  }

  button#dropdown-toggle {
    width: 100%;
    color: rgb(255, 255, 255);
    background-color: #2c3e50;
    padding: 10px;
    border: none;
    cursor: pointer;
    border-radius: 6px;
  }

  button#dropdown-toggle:hover {
    opacity: 0.9;
  }
</style>
