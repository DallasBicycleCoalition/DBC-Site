---
import type { PostsResult } from "../../../../sanity.types";
import Layout from "../../../layouts/Layout.astro";
import { getPosts } from "../../../utils/groqQueries";
import { urlFor } from "../../../utils/utils";

const limit = 10;

// Generate paths for pagination
export async function getStaticPaths() {
  const limit = 10;
  const totalPosts = await getPosts(0, Number.MAX_SAFE_INTEGER);
  const totalPages = Math.ceil(totalPosts.length / limit);

  const paths = Array.from({ length: totalPages }, (_, i) => ({
    params: { page: (i + 1).toString() },
  }));

  return paths;
}

// Get the current page from params
const { page } = Astro.params;
const currentPage = Number(page) || 1;

const start = (currentPage - 1) * limit;

// Fetch posts for the current page
const posts = await getPosts(start, limit);

// Utility to check if a post has a valid slug
function hasValidSlug(
  post: PostsResult
): post is PostsResult & { slug: { current: string } } {
  return post?.slug !== undefined && post?.slug.current !== undefined;
}

// Check if there's a next page
const hasNextPage = posts.length === limit;
---

<Layout title={"Blog Posts"}>
  <div class="blog-posts">
    {
      posts.filter(hasValidSlug).map((post) => (
        <div class="post">
          <div class="post-image-container">
            <img
              class="post-image"
              src={
                post.mainImage?.asset
                  ? urlFor(post.mainImage.asset).url()
                  : "/DallasBicycleCoalition_Badge_only.png"
              }
              alt={post.mainImage?.altText || "Default image"}
            />
          </div>
          <div>
            <p id="post-date">{new Date(post._createdAt).toLocaleDateString('en-US', {
              month: 'long', day: 'numeric', year: 'numeric'
            })}</p>
            <h2>
              <a id="post-title" href={`/blog/post/${post?.slug?.current}`}>{post?.title}</a>
            </h2>
            <p id="post-content">{post.excerpt}</p>
          </div>
        </div>
        <hr class="post-separator" />
      ))
    }
  </div>
  <div class="pagination">
    {
      currentPage > 1 && (
        <a href={`/blog/page/${currentPage - 1}`}>&laquo; Previous</a>
      )
    }
    {hasNextPage && <a href={`/blog/page/${currentPage + 1}`}>Next &raquo;</a>}
  </div>
</Layout>

<style>
  .blog-posts {
    width: 90%;
    max-width: 80em;
    margin: 2em auto 0;
    display: flex;
    flex-direction: column;
    gap: 2em;
  }

  .post {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
    gap: 1.5em;
  }

  .post-image-container {
    flex: 1 1 30%;
    max-width: 30%;
  }

  .post-image {
    width: 100%;
    height: auto;
    object-fit: cover;
    border-radius: 8px;
  }

  .post > div:nth-child(2) {
    flex: 1 1 55%;
    max-width: 55%;
  }

  #post-date {
    color: #cd011c;
    font-size: clamp(1em, 1.25vw, 1.25em);
    font-weight: bold;
    margin-bottom: 0.5em;
  }

  #post-title {
    font-size: clamp(1.25em, 2vw, 1.5em);
    margin: 0;
    text-decoration: none;
  }

  #post-content {
    font-size: clamp(1em, 1.5vw, 1.25em);
  }

  .post-separator {
    width: 100%;
    border: 1px solid #ccc;
    margin: 2em 0;
  }

  .pagination {
    display: flex;
    justify-content: space-between;
    margin-top: 2em;
  }

  .pagination a {
    font-size: clamp(1em, 1.25vw, 1.25em);
    text-decoration: none;
    color: #007acc;
  }

  @media (max-width: 768px) {
    .post {
      flex-direction: column;
    }

    .post-image-container,
    .post > div:nth-child(2) {
      flex: 1 1 100%;
      max-width: 100%;
    }
  }
</style>
